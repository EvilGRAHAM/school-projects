transmute((Weight_log - cvpred)^2) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
(
banana_reg_cv %>%
transmute(abs(Weight_log - cvpred)) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
tibble(
MSE =
(
banana_reg_cv %>%
transmute((Weight_log - cvpred)^2) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
,MAE =
(
banana_reg_cv %>%
transmute(abs(Weight_log - cvpred)) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
,MPAE =
(
banana_reg_cv %>%
transmute(abs(Weight_log - cvpred)/Weight_log) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
)
tibble(
MSE =
(
banana_reg_cv %>%
transmute((Weight_log - cvpred)^2) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
,MAE =
(
banana_reg_cv %>%
transmute(abs(Weight_log - cvpred)) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
,MPAE =
(
banana_reg_cv %>%
transmute(abs(Weight_log - cvpred)/Weight_log) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
)
banana_data_post <-
banana_data %>%
inner_join(
banana_resid_data
,by = "ID"
) %>%
filter(
!(abs(`Std Residuals`) > 2 & Leverage > 0.2)
) %>%
select(
-c(
Predicted
,Actual
,`Std Residuals`
,Leverage
,Residual
)
)
banana_reg_cv <-
banana_data_post %>%
cv.lm(
Weight_log ~ Length_log + Radius_log
,plotit = FALSE
) %>% pander()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(pander, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(DAAG, warn.conflicts = FALSE, quietly = TRUE)
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(magrittr, warn.conflicts = FALSE, quietly = TRUE)
library(ggfortify, warn.conflicts = FALSE, quietly = TRUE)
library(knitr, warn.conflicts = FALSE, quietly = TRUE)
set.seed(5609)
theme_minimal2 <- theme_minimal() %>%  theme_set()
theme_minimal2 <-
theme_update(
panel.border = element_rect(
linetype = "solid"
,colour = "grey92"
,fill = NA
)
,strip.background = element_rect(
linetype = "solid"
,colour = "grey92"
,fill = NA
)
)
banana_data <-
"mybanana.txt" %>%
read_tsv()
banana_data <-
banana_data %>%
mutate_at(
.vars = vars(Weight:Circumference)
,.funs = funs(log = log)
)
banana_tidy <-
banana_data %>%
select(
-c(
Weight_log
,Radius_log
,Length_log
,Circumference_log
)
) %>%
gather(
key = "Type"
,value = "Measurement"
,-ID
)
rsquare_sim <- c()
for(i in 1:1000){
banana_cor <-
banana_data %>%
sample_n(10) %>%
select(
Weight
,Radius
,Length
# ,Circumference
) %>%
cor()
xy_vec <- banana_cor[2:3, 1]
C_mat <- banana_cor[2:3, 2:3]
rsquare_sim[i] <- t(xy_vec) %*% solve(C_mat) %*% xy_vec
}
rsquare_sim %>%
summary() %>%
pander(caption = "Summary Statisitcs for Simulated R-Squared")
banana_summary <-
cbind(
Statistic =
c(
"Min."
,"1st Qu."
,"Median"
,"Mean"
,"3rd Qu."
,"Max"
)
,banana_data %>%
select(
-c(
ID
,Weight_log
,Radius_log
,Length_log
,Circumference_log
)
) %>%
map_df(summary)
) %>%
as.tibble()
kable(banana_summary, caption = "Banana Summary Statisitcs")
banana_tidy %>%
ggplot(aes(x = Measurement, colour = Type)) +
geom_histogram(
aes(y = ..density..)
,alpha = 0
,binwidth = function(x) nclass.FD(x)
) +
geom_density() +
facet_wrap(
~ Type
,scales = "free"
) +
scale_colour_brewer(
palette = "Dark2"
,type = "qual"
) +
labs(
title = "Figure 01: Sample Distributions of Banana Data"
,y = "P(Y=y)"
) +
theme(legend.position = "none")
banana_data %>%
select(
-c(
Weight_log
,Radius_log
,Length_log
,Circumference_log
)
) %>%
gather(
key = "Type"
,value = "Measurement"
,-ID
,-Weight
) %>%
ggplot(
aes(
x = Measurement
,y = Weight
,colour = Type
)
) +
geom_smooth(
method = "loess"
,se = FALSE
) +
geom_smooth(
method = "lm"
,se = FALSE
) +
geom_point() +
facet_wrap(
~ Type
,scales = "free_x"
) +
scale_colour_brewer(
palette = "Set2"
,type = "qual"
) +
labs(
title = "Figure 02: Weight vs. Predictors"
,y = "Weight (g)"
) +
theme(legend.position = "none")
banana_reg_01 <-
banana_data %>%
lm(
Weight_log ~ Length_log + Radius_log + Circumference_log
,data = .
)
pander(summary(banana_reg_01))
banana_data %>%
select(
-c(
ID
,Weight_log
,Radius_log
,Length_log
,Circumference_log
)
) %>%
cor() %>%
as.data.frame() %>%
rownames_to_column() %>%
as.tibble() %>%
gather(
key = Column
,value = Correlation
,-rowname
) %>%
rename(Row = rowname) %>%
ggplot(
aes(
x = Column
,y = Row
,fill = Correlation
)
) +
geom_raster() +
scale_fill_distiller(
type = "div"
,palette = "RdBu"
,limits = c(-1, 1)
) +
labs(title= "Figure 03: Correlation Plot") +
theme(
axis.text.x = element_text(angle = 90, hjust = 1)
,axis.title.x = element_blank()
,axis.title.y = element_blank()
,panel.grid = element_blank()
)
banana_reg_02 <-
banana_data %>%
lm(
Weight_log ~ Length_log + Radius_log
,data = .
)
pander(summary(banana_reg_02))
banana_reg_03 <-
banana_data %>%
lm(
Weight_log ~ Length_log
,data = .
)
pander(summary(banana_reg_03))
banana_reg_04 <-
banana_data %>%
lm(
Weight_log ~ Radius_log
,data = .
)
pander(summary(banana_reg_04))
pander(anova(banana_reg_02, banana_reg_01), caption = "Analysis of Variance Table: Model 01 vs. Model 02")
pander(anova(banana_reg_03, banana_reg_02), caption = "Analysis of Variance Table: Model 02 vs. Model 03")
pander(anova(banana_reg_04, banana_reg_02), caption = "Analysis of Variance Table: Model 02 vs. Model 04")
banana_resid_data <-
tibble(
Predicted = predict(banana_reg_02)
,Actual = banana_data$Weight_log
,ID = banana_data$ID
,`Std Residuals` = stdres(banana_reg_02)
,Leverage = hatvalues(banana_reg_02)
) %>%
mutate(Residual = Actual - Predicted)
banana_resid_data %>%
ggplot(aes(x = Predicted, y = `Std Residuals`)) +
geom_hline(
aes(yintercept = -2)
,linetype = "dashed"
) +
geom_hline(
aes(yintercept = 2)
,linetype = "dashed"
) +
geom_point() +
geom_text(
data =
banana_resid_data %>%
filter(abs(`Std Residuals`) >= 2)
,aes(label = ID)
,nudge_x = 0.005
) +
geom_smooth(
method = "loess"
,se = FALSE
) +
geom_smooth(
method = "lm"
,se = FALSE
) +
labs(
title = "Figure 04: Standardized Residuals vs. Predicted for Model 02"
,x = "Predicted (ln)"
,y = "Standardized Residual (ln)"
)
banana_resid_data %>%
ggplot(aes(x = Leverage, y = `Std Residuals`)) +
geom_hline(
aes(yintercept = -2)
,linetype = "dashed"
) +
geom_hline(
aes(yintercept = 2)
,linetype = "dashed"
) +
geom_point() +
geom_text(
data =
banana_resid_data %>%
filter(abs(`Std Residuals`) >= 2)
,aes(label = ID)
,nudge_x = 0.02
) +
geom_smooth(
method = "loess"
,se = FALSE
) +
geom_smooth(
method = "lm"
,se = FALSE
) +
labs(
title = "Figure 05: Standardized Residuals vs. Leverage for Model 02"
,x = "Leverage (ln)"
,y = "Standardized Residual (ln)"
)
banana_data %>%
inner_join(
banana_resid_data %>%
filter(abs(`Std Residuals`) > 2)
,by = "ID"
) %>%
select(
ID
,Weight
,Radius
,Length
,Circumference
,`Std Residuals`
,Leverage
) %>%
kable(caption = "Entries with a |Standardized Residual| >2")
banana_data_post <-
banana_data %>%
inner_join(
banana_resid_data
,by = "ID"
) %>%
filter(
!(abs(`Std Residuals`) > 2 & Leverage > 0.2)
) %>%
select(
-c(
Predicted
,Actual
,`Std Residuals`
,Leverage
,Residual
)
)
banana_reg_cv <-
banana_data_post %>%
cv.lm(
Weight_log ~ Length_log + Radius_log
,plotit = FALSE
) %>% pander()
# banana_reg_cv %>%
#   mutate(
#     `CV Residual` = (cvpred) - (Weight_log)
#     ,Residual = Predicted - Weight_log
#   )
tibble(
MSE =
(
banana_reg_cv %>%
transmute((Weight_log - cvpred)^2) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
,MAE =
(
banana_reg_cv %>%
transmute(abs(Weight_log - cvpred)) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
,MPAE =
(
banana_reg_cv %>%
transmute(abs(Weight_log - cvpred)/Weight_log) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
)
tibble(
MSE =
(
banana_reg_cv %>%
transmute((Weight_log - cvpred)^2) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
,MAE =
(
banana_reg_cv %>%
transmute(abs(Weight_log - cvpred)) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
,MPAE =
(
banana_reg_cv %>%
transmute(abs(Weight_log - cvpred)/Weight_log) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
)
banana_reg_cv %>%
transmute((Weight_log - cvpred)^2) %>%
sum()
tibble(
MSE =
(
banana_reg_cv %>%
dplyr::transmute((Weight_log - cvpred)^2) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
,MAE =
(
banana_reg_cv %>%
transmute(abs(Weight_log - cvpred)) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
,MPAE =
(
banana_reg_cv %>%
transmute(abs(Weight_log - cvpred)/Weight_log) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
)
(
banana_reg_cv %>%
dplyr::transmute((Weight_log - cvpred)^2) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
banana_reg_cv
banana_reg_cv %>% pander("CV Model")
banana_reg_cv <-
banana_data_post %>%
cv.lm(
Weight_log ~ Length_log + Radius_log
,plotit = FALSE
)
banana_reg_cv %>% pander("CV Model")
tibble(
MSE =
(
banana_reg_cv %>%
transmute((Weight_log - cvpred)^2) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
,MAE =
(
banana_reg_cv %>%
transmute(abs(Weight_log - cvpred)) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
,MPAE =
(
banana_reg_cv %>%
transmute(abs(Weight_log - cvpred)/Weight_log) %>%
sum()
)/(as.numeric(count(banana_reg_cv)))
)
